"Name"    = 'BASIC (Beginners All-purpose Symbolic Instruction Code)'
"Author"  = 'Carlos Diaz' 
"Version" = '2020 - SubGrammar for the purpose of simplifying a school project.'

LEXICAL RULES AS REGULAR EXPRESSIONS

KEYWORDS:
    remark: (?i)^REM$
    newLine: ^<newline>$
    colon: ^:$
    assignment: ^=$
    comma: ^,$
    semicolon: ^;$
    greaterThan: ^>$
    lessThan: ^<$
    multiplication: ^*$
    plus: ^+$
    minus: ^-$
    or: (?i)^OR$
    and: (?i)^AND$
    if: (?i)^IF$
    end: (?i)^END$
    print: (?i)^PRINT$
    instantiation: (?i)^LET$
    openParens: ^($
    closeParens: ^)$
            
IDENTIFIERS/LITERALS:
    integer: ^[+-]?(\d)*$
    string: \"(\w)*\"
    printable: ^([A-Za-z])([A-Za-z0-9])*$
            


<Lines>       ::= Integer <Statement> NewLine <Lines> 
                | Integer <Statement> NewLine

<Statement>   ::= END            
                | IF '(' <Expression> ')' THEN <Statement>  
                | LET Id '=' <Expression> 
                | PRINT <Expression>
                | PRINT '#' Integer ',' <Expression>
                | REM Remark
                | <Expression>


<Expression>  ::= <And Exp> OR <Expression> 
                | <And Exp> 

<And Exp>     ::= <Not Exp> AND <And Exp> 
                | <Not Exp> 
 
<Not Exp>     ::= NOT <Compare Exp> 
                | <Compare Exp> 

<Compare Exp> ::= <Add Exp> <Comparator> <Add Exp>
                | <Add Exp> 

<Comparator> ::= '=='
               | '>'
               | '<'

<Add Exp>     ::= <Mult Exp> '+' <Add Exp> 
                | <Mult Exp> '-' <Add Exp> 
                | <Mult Exp> 

<Mult Exp>    ::= <Negate Exp> '*' <Mult Exp> 
                | <Negate Exp> '/' <Mult Exp> 
                | <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
                | <Value> 

<Value>       ::= '(' <Expression> ')'
                | ID '(' <Expression> ')'
                | <Constant> 

<Constant> ::= Integer 
             | String 
