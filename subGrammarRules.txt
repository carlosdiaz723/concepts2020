"Name"    = 'BASIC (Beginners All-purpose Symbolic Instruction Code)'
"Author"  = 'Carlos Diaz' 
"Version" = '2020 - SubGrammar for the purpose of simplifying a school project.'

LEXICAL RULES AS REGULAR EXPRESSIONS

KEYWORDS:
    remark: (?i)^REM$
    newLine: ^<newline>$
    colon: ^:$
    assignment: ^=$
    comma: ^,$
    semicolon: ^;$
    greaterThan: ^>$
    lessThan: ^<$
    multiplication: ^*$
    plus: ^+$
    minus: ^-$
    or: (?i)^OR$
    and: (?i)^AND$
    goTo: (?i)^GOTO$
    if: (?i)^IF$
    end: (?i)^END$
    print: (?i)^PRINT$
    instantiation: (?i)^LET$
    openParens: ^($
    closeParens: ^)$
            
IDENTIFIERS/LITERALS:
    integer: ^[+-]?(\d)*$
    string: \"(\w)*\"
    printable: ^([A-Za-z])([A-Za-z0-9])*$
            


<Lines>       ::= Integer <Statements> NewLine <Lines> 
                | Integer <Statements> NewLine

<Statements>  ::= <Statement> ':' <Statements>
                | <Statement>

<Statement>   ::= END            
                | GOTO <Expression> 
                | IF <Expression> THEN <Statement>  
                | LET Id '=' <Expression> 
                | PRINT <Print List>
                | PRINT '#' Integer ',' <Print List>
                | Remark
                | <Expression>

                 
<Expression List> ::= <Expression> ',' <Expression List> 
                    | <Expression> 

<Print List>      ::= <Expression> ';' <Print List>
                    | <Expression> 

<Expression>  ::= <And Exp> OR <Expression> 
                | <And Exp> 

<And Exp>     ::= <Not Exp> AND <And Exp> 
                | <Not Exp> 
 
<Not Exp>     ::= NOT <Compare Exp> 
                | <Compare Exp> 

<Compare Exp> ::= <Add Exp> <Comparator> <Compare Exp>
                | <Add Exp> 

<Comparator> ::= '=='
               | '>'
               | '>='
               | '<'
               | '<='

<Add Exp>     ::= <Mult Exp> '+' <Add Exp> 
                | <Mult Exp> '-' <Add Exp> 
                | <Mult Exp> 

<Mult Exp>    ::= <Negate Exp> '*' <Mult Exp> 
                | <Negate Exp> '/' <Mult Exp> 
                | <Negate Exp> 

<Negate Exp>  ::= '-' <Power Exp> 
                | <Power Exp> 

<Power Exp>   ::= <Power Exp> '^' <Value> 
                | <Value> 

<Value>       ::= '(' <Expression> ')'
                | ID 
                | ID '(' <Expression List> ')'
                | <Constant> 

<Constant> ::= Integer 
             | String 
             | Real 
